## Put comments here that give an overall description of what your functions do
## Write a short comment describing this function

makeCacheMatrix <- function(x = matrix()) {

}


## Write a short comment describing this function
## Return a matrix that is the inverse of 'x'
cacheSolve <- function(x, ...) {

}
## Put comments here that give an overall description of what your functions do

## Write a short comment describing this function
##Create a special matrix object that can cache its inverse

library(MASS)
makeCacheMatrix <- function(x = matrix()) {
  inv<-NULL
  set<-function( y ) {
       x<<-y
       inv<<-NULL
  }
  get<- function()x 
  setinv <-function(inverse)inv<<-inverse
  getinv <- function(){
                          inver<-ginv(x)
                          inver%*%x

                          }
  list(set= set, get= get,
       setinv= setinv,
       getinv= getinv)

## Write a short comment describing this function

cacheSolve <- function(x, ...) {
  inv <-x$getinv()

  if(!is.null(inv )) {
        message("getting cached data")
        return(m)
  }

## Getting matrix from the object
  data <- x$get()

##Calculate the inverse using matrix multiplication
  inv <- solve(data) %*% data

## Setting the inverse to object
  x$setinv(inv)
  inv
}

## Returning a matrix which is the inverse of "x"
}
